         }
         #unlimitedGrassControls { background-color: #90EE90; } /* Unlimited grass color */
         #limitedGrassControls { background-color: #66CDAA; }   /* Limited grass (edible) color */
-        #sheepControls { background-color: #e0f2ff; }          /* Light blue for sheep - can be adjusted if needed */
+        #pheasantControls { background-color: #e0f2ff; }       /* Light blue for Pheasant (was Sheep) */
         #rabbitControls { background-color: #f3e8ff; }         /* Light purple for rabbits - can be adjusted if needed */
-        #wolfControls { background-color: #ffe0e0; }           /* Light red for wolves - can be adjusted if needed */
+        #squirrelControls { background-color: #d3c1b1; }       /* Light Gray/Brown for Squirrel */
+        #mouseControls { background-color: #e0e0e0; }          /* Light Gray for Mouse */
+        #eagleControls { background-color: #ffe0e0; }          /* Light red for Eagle (was Wolf) */
+        #snakeControls { background-color: #a0d9a0; }          /* Light Green/Teal for Snake */
+        #weaselControls { background-color: #faddc0; }         /* Light Brown/Orange for Weasel */
 
         .control-group input[type="range"]:disabled {
             opacity: 0.5;
@@ -146,11 +150,15 @@
         }
 
         /* Styling for individual animal stat items */
-        #sheepCountDisplay, #rabbitsCountDisplay, #wolvesCountDisplay {
+        #pheasantCountDisplay, #rabbitsCountDisplay, #squirrelCountDisplay, #mouseCountDisplay, 
+        #eagleCountDisplay, #snakeCountDisplay, #weaselCountDisplay {
             padding: 3px 6px;
             border-radius: 4px;
             font-size: 0.85em; /* Consistent with grass items */
             margin: 0 1px; /* Small margin between animal items */
         }
-        #sheepCountDisplay { background-color: #e0f2ff; } /* Matches #sheepControls */
+        #pheasantCountDisplay { background-color: #e0f2ff; } /* Matches #pheasantControls */
         #rabbitsCountDisplay { background-color: #f3e8ff; } /* Matches #rabbitControls */
-        #wolvesCountDisplay { background-color: #ffe0e0; } /* Matches #wolfControls */
+        #squirrelCountDisplay { background-color: #d3c1b1; }
+        #mouseCountDisplay { background-color: #e0e0e0; }
+        #eagleCountDisplay { background-color: #ffe0e0; } /* Matches #eagleControls */
+        #snakeCountDisplay { background-color: #a0d9a0; }
+        #weaselCountDisplay { background-color: #faddc0; }
 
         .chart-area {
             flex: 1; /* 佔據可用空間的一半 */
@@ -226,26 +234,26 @@
                 <hr style="margin: 8px 0; border-color: #eee;">
 
                 <div class="control-group">
-                    <label for="selectSheep" title="啟用或停用羊群。">啟用羊群:</label>
-                    <input type="checkbox" id="selectSheep" checked title="勾選以在模擬中包含羊群。">
-                </div>
-                <div id="sheepControls" class="species-controls-group">
-                    <div class="control-group">
-                        <label for="initialNumberSheep" title="設定模擬開始時羊的初始數量。">初始羊群:</label>
-                        <input type="range" id="initialNumberSheep" min="0" max="500" value="100" title="調整初始羊群數量。">
-                        <span id="initialNumberSheepValue" class="value-display">100</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="sheepReproduce" title="設定羊每回合繁殖的機率百分比。">羊繁殖率%:</label>
-                        <input type="range" id="sheepReproduce" min="0" max="10" value="4" title="調整羊的繁殖機率。">
-                        <span id="sheepReproduceValue" class="value-display">4</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="sheepSpeed" title="設定羊每回合移動的步數。數值越大移動越快。">羊速度:</label>
-                        <input type="range" id="sheepSpeed" min="1" max="5" value="1" step="1" title="調整羊每回合移動的次數。">
-                        <span id="sheepSpeedValue" class="value-display">1</span>
+                    <label for="selectPheasant" title="啟用或停用雉雞。">啟用雉雞:</label>
+                    <input type="checkbox" id="selectPheasant" checked title="勾選以在模擬中包含雉雞。">
+                </div>
+                <div id="pheasantControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberPheasant" title="設定模擬開始時雉雞的初始數量。">初始雉雞:</label>
+                        <input type="range" id="initialNumberPheasant" min="0" max="500" value="80" title="調整初始雉雞數量。">
+                        <span id="initialNumberPheasantValue" class="value-display">80</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="pheasantReproduce" title="設定雉雞每回合繁殖的機率百分比。">雉雞繁殖率%:</label>
+                        <input type="range" id="pheasantReproduce" min="0" max="10" value="5" title="調整雉雞的繁殖機率。">
+                        <span id="pheasantReproduceValue" class="value-display">5</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="pheasantSpeed" title="設定雉雞每回合移動的步數。">雉雞速度:</label>
+                        <input type="range" id="pheasantSpeed" min="1" max="5" value="1" step="1" title="調整雉雞移動速度。">
+                        <span id="pheasantSpeedValue" class="value-display">1</span>
                     </div>
                 </div>
 
@@ -253,12 +261,12 @@
                     <label for="selectRabbit" title="啟用或停用兔群。">啟用兔群:</label>
                     <input type="checkbox" id="selectRabbit" title="勾選以在模擬中包含兔群。">
                 </div>
-                <div id="rabbitControls" class="species-controls-group">
+                <div id="rabbitControls" class="species-controls-group"> <!-- Rabbit is existing -->
                     <div class="control-group">
                         <label for="initialNumberRabbits" title="設定模擬開始時兔的初始數量。">初始兔群:</label>
-                        <input type="range" id="initialNumberRabbits" min="0" max="500" value="0" title="調整初始兔群數量。">
-                        <span id="initialNumberRabbitsValue" class="value-display">0</span>
+                        <input type="range" id="initialNumberRabbits" min="0" max="500" value="50" title="調整初始兔群數量。">
+                        <span id="initialNumberRabbitsValue" class="value-display">50</span>
                     </div>
                     <div class="control-group">
                         <label for="rabbitReproduce" title="設定兔每回合繁殖的機率百分比。">兔繁殖率%:</label>
@@ -273,35 +281,111 @@
                 </div>
 
                 <div class="control-group">
-                    <label for="selectWolf" title="啟用或停用狼群。">啟用狼群:</label>
-                    <input type="checkbox" id="selectWolf" title="勾選以在模擬中包含狼群。">
-                </div>
-                <div id="wolfControls" class="species-controls-group">
-                    <div class="control-group">
-                        <label for="initialNumberWolves" title="設定模擬開始時狼的初始數量。">初始狼群:</label>
-                        <input type="range" id="initialNumberWolves" min="0" max="250" value="50" title="調整初始狼群數量。">
-                        <span id="initialNumberWolvesValue" class="value-display">50</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="wolfGainFromFood" title="設定狼每次成功捕食一隻羊後獲得的能量值。">狼(羊)獲能:</label>
-                        <input type="range" id="wolfGainFromFood" min="5" max="50" value="20" title="調整狼從羊獲取的能量。">
-                        <span id="wolfGainFromFoodValue" class="value-display">20</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="wolfGainFromRabbitFood" title="設定狼每次成功捕食一隻兔後獲得的能量值。">狼(兔)獲能:</label>
-                        <input type="range" id="wolfGainFromRabbitFood" min="1" max="30" value="10" title="調整狼從兔獲取的能量。">
-                        <span id="wolfGainFromRabbitFoodValue" class="value-display">10</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="wolfReproduce" title="設定狼每回合繁殖的機率百分比。">狼繁殖率%:</label>
-                        <input type="range" id="wolfReproduce" min="0" max="10" value="5" title="調整狼的繁殖機率。">
-                        <span id="wolfReproduceValue" class="value-display">5</span>
-                    </div>
-                    <div class="control-group">
-                        <label for="maxWolves" title="設定狼群的最大數量上限。">最大狼群:</label>
-                        <input type="range" id="maxWolves" min="0" max="1000" value="200" step="10" title="調整狼群的總數上限。">
-                        <span id="maxWolvesValue" class="value-display">200</span>
+                    <label for="selectSquirrel" title="啟用或停用松鼠。">啟用松鼠:</label>
+                    <input type="checkbox" id="selectSquirrel" title="勾選以在模擬中包含松鼠。">
+                </div>
+                <div id="squirrelControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberSquirrel" title="設定模擬開始時松鼠的初始數量。">初始松鼠:</label>
+                        <input type="range" id="initialNumberSquirrel" min="0" max="500" value="40" title="調整初始松鼠數量。">
+                        <span id="initialNumberSquirrelValue" class="value-display">40</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="squirrelReproduce" title="設定松鼠每回合繁殖的機率百分比。">松鼠繁殖率%:</label>
+                        <input type="range" id="squirrelReproduce" min="0" max="15" value="7" title="調整松鼠的繁殖機率。">
+                        <span id="squirrelReproduceValue" class="value-display">7</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="squirrelSpeed" title="設定松鼠每回合移動的步數。">松鼠速度:</label>
+                        <input type="range" id="squirrelSpeed" min="1" max="5" value="2" step="1" title="調整松鼠移動速度。">
+                        <span id="squirrelSpeedValue" class="value-display">2</span>
+                    </div>
+                </div>
+
+                <div class="control-group">
+                    <label for="selectMouse" title="啟用或停用老鼠。">啟用老鼠:</label>
+                    <input type="checkbox" id="selectMouse" title="勾選以在模擬中包含老鼠。">
+                </div>
+                <div id="mouseControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberMouse" title="設定模擬開始時老鼠的初始數量。">初始老鼠:</label>
+                        <input type="range" id="initialNumberMouse" min="0" max="500" value="60" title="調整初始老鼠數量。">
+                        <span id="initialNumberMouseValue" class="value-display">60</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="mouseReproduce" title="設定老鼠每回合繁殖的機率百分比。">老鼠繁殖率%:</label>
+                        <input type="range" id="mouseReproduce" min="0" max="20" value="8" title="調整老鼠的繁殖機率。">
+                        <span id="mouseReproduceValue" class="value-display">8</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="mouseSpeed" title="設定老鼠每回合移動的步數。">老鼠速度:</label>
+                        <input type="range" id="mouseSpeed" min="1" max="5" value="1" step="1" title="調整老鼠移動速度。">
+                        <span id="mouseSpeedValue" class="value-display">1</span>
+                    </div>
+                </div>
+
+                <hr style="margin: 8px 0; border-color: #eee;">
+                <p style="font-size: 0.9em; text-align: center; margin: 2px 0;">肉食動物設定:</p>
+
+                <div class="control-group">
+                    <label for="selectEagle" title="啟用或停用老鷹。">啟用老鷹:</label>
+                    <input type="checkbox" id="selectEagle" title="勾選以在模擬中包含老鷹。">
+                </div>
+                <div id="eagleControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberEagle" title="設定模擬開始時老鷹的初始數量。">初始老鷹:</label>
+                        <input type="range" id="initialNumberEagle" min="0" max="100" value="10" title="調整初始老鷹數量。">
+                        <span id="initialNumberEagleValue" class="value-display">10</span>
+                    </div>
+                    <!-- Simplified energy gain for Eagle, can be expanded later if needed -->
+                    <div class="control-group">
+                        <label for="eagleGainFromPrey" title="老鷹捕食獵物獲得的平均能量。">老鷹獲能:</label>
+                        <input type="range" id="eagleGainFromPrey" min="5" max="50" value="15" title="調整老鷹從獵物獲取的能量。">
+                        <span id="eagleGainFromPreyValue" class="value-display">15</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="eagleReproduce" title="設定老鷹每回合繁殖的機率百分比。">老鷹繁殖率%:</label>
+                        <input type="range" id="eagleReproduce" min="0" max="10" value="3" title="調整老鷹的繁殖機率。">
+                        <span id="eagleReproduceValue" class="value-display">3</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="maxEagles" title="設定老鷹的最大數量上限。">最大鷹群:</label>
+                        <input type="range" id="maxEagles" min="0" max="200" value="50" step="5" title="調整老鷹的總數上限。">
+                        <span id="maxEaglesValue" class="value-display">50</span>
+                    </div>
+                </div>
+
+                <div class="control-group">
+                    <label for="selectSnake" title="啟用或停用蛇。">啟用蛇:</label>
+                    <input type="checkbox" id="selectSnake" title="勾選以在模擬中包含蛇。">
+                </div>
+                <div id="snakeControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberSnake" title="設定模擬開始時蛇的初始數量。">初始蛇群:</label>
+                        <input type="range" id="initialNumberSnake" min="0" max="150" value="20" title="調整初始蛇數量。">
+                        <span id="initialNumberSnakeValue" class="value-display">20</span>
+                    </div>
+                     <div class="control-group">
+                        <label for="snakeGainFromPrey" title="蛇捕食獵物獲得的平均能量。">蛇獲能:</label>
+                        <input type="range" id="snakeGainFromPrey" min="5" max="40" value="12" title="調整蛇從獵物獲取的能量。">
+                        <span id="snakeGainFromPreyValue" class="value-display">12</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="snakeReproduce" title="設定蛇每回合繁殖的機率百分比。">蛇繁殖率%:</label>
+                        <input type="range" id="snakeReproduce" min="0" max="10" value="4" title="調整蛇的繁殖機率。">
+                        <span id="snakeReproduceValue" class="value-display">4</span>
+                    </div>
+                </div>
+
+                <div class="control-group">
+                    <label for="selectWeasel" title="啟用或停用黃鼠狼。">啟用黃鼠狼:</label>
+                    <input type="checkbox" id="selectWeasel" title="勾選以在模擬中包含黃鼠狼。">
+                </div>
+                <div id="weaselControls" class="species-controls-group">
+                    <div class="control-group">
+                        <label for="initialNumberWeasel" title="設定模擬開始時黃鼠狼的初始數量。">初始黃鼠狼:</label>
+                        <input type="range" id="initialNumberWeasel" min="0" max="200" value="30" title="調整初始黃鼠狼數量。">
+                        <span id="initialNumberWeaselValue" class="value-display">30</span>
+                    </div>
+                     <div class="control-group">
+                        <label for="weaselGainFromPrey" title="黃鼠狼捕食獵物獲得的平均能量。">黃鼠狼獲能:</label>
+                        <input type="range" id="weaselGainFromPrey" min="5" max="30" value="10" title="調整黃鼠狼從獵物獲取的能量。">
+                        <span id="weaselGainFromPreyValue" class="value-display">10</span>
+                    </div>
+                    <div class="control-group">
+                        <label for="weaselReproduce" title="設定黃鼠狼每回合繁殖的機率百分比。">黃鼠狼繁殖率%:</label>
+                        <input type="range" id="weaselReproduce" min="0" max="10" value="5" title="調整黃鼠狼的繁殖機率。">
+                        <span id="weaselReproduceValue" class="value-display">5</span>
                     </div>
                 </div>
 
@@ -309,7 +393,7 @@
                 <p style="font-size: 0.9em; text-align: center; margin: 2px 0;">通用設定:</p>
 
                 <div class="control-group">
-                    <label for="maxHerbivores" title="設定草食動物(羊和兔的總和)的最大數量上限。當狼群消失且草食動物達到此上限時，模擬將停止。">草食動物負荷量:</label>
+                    <label for="maxHerbivores" title="設定草食動物(雉雞、兔、松鼠、老鼠的總和)的最大數量上限。">草食動物負荷量:</label>
                     <input type="range" id="maxHerbivores" min="500" max="10000" value="2000" step="100" title="調整草食動物的總數上限。">
                     <span id="maxHerbivoresValue" class="value-display">2000</span>
                 </div>
@@ -347,9 +431,13 @@
                 <div class="stats">                    
                     <span id="ticksDisplay" class="stat-group tick-stat">回合: 0</span>
                     <span class="stat-group animal-stats">
+                        <span id="pheasantCountDisplay">雉雞: N/A</span>
                         <span id="rabbitsCountDisplay">兔群: N/A</span>                        
-                        <span id="sheepCountDisplay">羊群: N/A</span>
-                        <span id="wolvesCountDisplay">狼群: N/A</span>
+                        <span id="squirrelCountDisplay">松鼠: N/A</span>
+                        <span id="mouseCountDisplay">老鼠: N/A</span>
+                        <span id="eagleCountDisplay">老鷹: N/A</span>
+                        <span id="snakeCountDisplay">蛇: N/A</span>
+                        <span id="weaselCountDisplay">黃鼠狼: N/A</span>
                     </span>
                     <div class="grass-stats-container">
                         <span id="unlimitedGrassStatDisplay" class="grass-stat-item" style="background-color: #cfe9cf;">
@@ -387,13 +475,20 @@
         const AGENT_FONT_SIZE_MULTIPLIER = 1; // Current user setting (patchSize * 2 for larger icons)
         const ENERGY_FONT_SIZE_MULTIPLIER = 0.5;
 
-        const SHEEP_ICON = '🐑';
-        const WOLF_ICON = '🐺';
+        const PHEASANT_ICON = '🐔'; // Using chicken as proxy for pheasant
         const RABBIT_ICON = '🐇';
-
-        const SHEEP_ENERGY_COLOR = 'blue';
-        const WOLF_ENERGY_COLOR = 'red';
+        const SQUIRREL_ICON = '🐿️';
+        const MOUSE_ICON = '🐁';
+        const EAGLE_ICON = '🦅';
+        const SNAKE_ICON = '🐍';
+        const WEASEL_ICON = '🐾'; // Placeholder, could use a letter or emoji
+
+        const PHEASANT_ENERGY_COLOR = 'blue'; // Was sheep
         const RABBIT_ENERGY_COLOR = 'purple';
+        const SQUIRREL_ENERGY_COLOR = '#8B4513'; // Brown
+        const MOUSE_ENERGY_COLOR = 'gray';
+        const EAGLE_ENERGY_COLOR = 'red'; // Was wolf
+        const SNAKE_ENERGY_COLOR = 'green';
+        const WEASEL_ENERGY_COLOR = '#D2691E'; // Chocolate/Orange
 
         const PATCH_PCOLOR_GREEN = 'green'; // For internal logic (patch.pcolor value)
         const PATCH_PCOLOR_BROWN = 'brown'; // For internal logic (patch.pcolor value)
@@ -405,9 +500,13 @@
         let config = {
             // Component selection
             hasUnlimitedGrass: true,
-            hasLimitedGrass: false,
-            hasSheep: true,
-            hasRabbit: false,
-            hasWolf: false,
+            hasLimitedGrass: true,
+            hasPheasant: true,
+            hasRabbit: true,
+            hasSquirrel: true,
+            hasMouse: true,
+            hasEagle: true,
+            hasSnake: true,
+            hasWeasel: true,
 
             // Unlimited Grass (A)
             energyFromUnlimitedGrass: 2,
@@ -418,23 +517,40 @@
             grassRegrowthTime: 30,
             grassCarryingCapacity: 2000,
 
-            // Sheep
-            initialNumberSheep: 100,
-            sheepReproduce: 4,
-
-            sheepSpeed: 1, // New: Sheep speed (moves per tick)
-
-            // Rabbit
-            initialNumberRabbits: 0,
+            // Pheasant (replaces Sheep)
+            initialNumberPheasant: 80,
+            pheasantReproduce: 5,
+            pheasantSpeed: 1,
+
+            // Rabbit (existing)
+            initialNumberRabbits: 50,
             rabbitReproduce: 6,
-
-            // Wolf
-            initialNumberWolves: 50,
-            wolfGainFromFood: 20, // Energy from eating sheep
-            wolfGainFromRabbitFood: 10, // Energy from eating rabbit
-            wolfReproduce: 5,
-            maxWolves: 200, // New: Max wolves population
-
             rabbitSpeed: 2, // New: Rabbit speed (moves per tick)
+
+            // Squirrel
+            initialNumberSquirrel: 40,
+            squirrelReproduce: 7,
+            squirrelSpeed: 2,
+
+            // Mouse
+            initialNumberMouse: 60,
+            mouseReproduce: 8,
+            mouseSpeed: 1,
+
+            // Eagle (replaces Wolf)
+            initialNumberEagle: 10,
+            eagleGainFromPrey: 15, // Average energy gain
+            eagleReproduce: 3,
+            maxEagles: 50, // Max eagle population
+
+            // Snake
+            initialNumberSnake: 20,
+            snakeGainFromPrey: 12,
+            snakeReproduce: 4,
+
+            // Weasel
+            initialNumberWeasel: 30,
+            weaselGainFromPrey: 10,
+            weaselReproduce: 5,
 
             // General
             maxHerbivores: 2000, // Max combined sheep and rabbits
@@ -447,23 +563,41 @@
         const initialDefaultConfig = JSON.parse(JSON.stringify(config));
 
         let patches = [];
-        let sheep = [];
-        let wolves = [];
-        let rabbits = []; // New: Array for rabbits        
+        let pheasants = [];
+        let rabbits = [];
+        let squirrels = [];
+        let mice = [];
+        let eagles = [];
+        let snakes = [];
+        let weasels = [];
+
         let ticks = 0;
         let simulationInterval = null;
         let simulationRunning = false;
 
         let currentVisibleChart = 'population'; // 'population' or 'energyPyramid'
         let populationChartInstance = null;
         let energyPyramidChartInstance = null;
         let chartData = {
-            labels: [], 
-            sheep: [], wolves: [], grass: [], rabbits: []
+            labels: [],
+            grass: [], // Limited Grass B
+            pheasants: [], rabbits: [], squirrels: [], mice: [], // Herbivores
+            eagles: [], snakes: [], weasels: [] // Carnivores
         };
         const MAX_CHART_POINTS = 300; // Reduced points for performance with faster updates
 
         // --- UI Elements ---
         // Checkboxes for selecting components
         const selectUnlimitedGrassCheckbox = document.getElementById('selectUnlimitedGrass');
         const selectLimitedGrassCheckbox = document.getElementById('selectLimitedGrass');
-        const selectSheepCheckbox = document.getElementById('selectSheep');
+        const selectPheasantCheckbox = document.getElementById('selectPheasant');
         const selectRabbitCheckbox = document.getElementById('selectRabbit');
-        const selectWolfCheckbox = document.getElementById('selectWolf');
+        const selectSquirrelCheckbox = document.getElementById('selectSquirrel');
+        const selectMouseCheckbox = document.getElementById('selectMouse');
+        const selectEagleCheckbox = document.getElementById('selectEagle');
+        const selectSnakeCheckbox = document.getElementById('selectSnake');
+        const selectWeaselCheckbox = document.getElementById('selectWeasel');
 
         // Sliders for Unlimited Grass A
         const energyFromUnlimitedGrassSlider = document.getElementById('energyFromUnlimitedGrass');
@@ -472,20 +606,34 @@
         const initialLimitedGrassPercentSlider = document.getElementById('initialLimitedGrassPercent'); // New
         const grassRegrowthTimeSlider = document.getElementById('grassRegrowthTime');
         const grassCarryingCapacitySlider = document.getElementById('grassCarryingCapacity');
-        // Sliders for Sheep        
-        const initialNumberSheepSlider = document.getElementById('initialNumberSheep');
-        const sheepReproduceSlider = document.getElementById('sheepReproduce');
-        const sheepSpeedSlider = document.getElementById('sheepSpeed'); // New
+        // Sliders for Pheasant
+        const initialNumberPheasantSlider = document.getElementById('initialNumberPheasant');
+        const pheasantReproduceSlider = document.getElementById('pheasantReproduce');
+        const pheasantSpeedSlider = document.getElementById('pheasantSpeed');
         // Sliders for Rabbit
         const rabbitSpeedSlider = document.getElementById('rabbitSpeed'); // New
         const initialNumberRabbitsSlider = document.getElementById('initialNumberRabbits');
         const rabbitReproduceSlider = document.getElementById('rabbitReproduce');
-        // Sliders for Wolf
-        const initialNumberWolvesSlider = document.getElementById('initialNumberWolves');
-        const wolfGainFromFoodSlider = document.getElementById('wolfGainFromFood');
-        const wolfGainFromRabbitFoodSlider = document.getElementById('wolfGainFromRabbitFood');
-        const wolfReproduceSlider = document.getElementById('wolfReproduce');
-        const maxWolvesSlider = document.getElementById('maxWolves'); // New
+        // Sliders for Squirrel
+        const initialNumberSquirrelSlider = document.getElementById('initialNumberSquirrel');
+        const squirrelReproduceSlider = document.getElementById('squirrelReproduce');
+        const squirrelSpeedSlider = document.getElementById('squirrelSpeed');
+        // Sliders for Mouse
+        const initialNumberMouseSlider = document.getElementById('initialNumberMouse');
+        const mouseReproduceSlider = document.getElementById('mouseReproduce');
+        const mouseSpeedSlider = document.getElementById('mouseSpeed');
+        // Sliders for Eagle
+        const initialNumberEagleSlider = document.getElementById('initialNumberEagle');
+        const eagleGainFromPreySlider = document.getElementById('eagleGainFromPrey');
+        const eagleReproduceSlider = document.getElementById('eagleReproduce');
+        const maxEaglesSlider = document.getElementById('maxEagles');
+        // Sliders for Snake
+        const initialNumberSnakeSlider = document.getElementById('initialNumberSnake');
+        const snakeGainFromPreySlider = document.getElementById('snakeGainFromPrey');
+        const snakeReproduceSlider = document.getElementById('snakeReproduce');
+        // Sliders for Weasel
+        const initialNumberWeaselSlider = document.getElementById('initialNumberWeasel');
+        const weaselGainFromPreySlider = document.getElementById('weaselGainFromPrey');
+        const weaselReproduceSlider = document.getElementById('weaselReproduce');
         // General Sliders
         const autoScaleYAxisCheckbox = document.getElementById('autoScaleYAxisCheckbox'); // New
         const maxHerbivoresSlider = document.getElementById('maxHerbivores');
@@ -501,9 +649,13 @@
         const resetDefaultsButton = document.getElementById('resetDefaultsButton');
 
         const ticksDisplay = document.getElementById('ticksDisplay');
-        const sheepCountDisplay = document.getElementById('sheepCountDisplay');
-        const wolvesCountDisplay = document.getElementById('wolvesCountDisplay');
-        const rabbitsCountDisplay = document.getElementById('rabbitsCountDisplay'); // New
+        const pheasantCountDisplay = document.getElementById('pheasantCountDisplay');
+        const rabbitsCountDisplay = document.getElementById('rabbitsCountDisplay');
+        const squirrelCountDisplay = document.getElementById('squirrelCountDisplay');
+        const mouseCountDisplay = document.getElementById('mouseCountDisplay');
+        const eagleCountDisplay = document.getElementById('eagleCountDisplay');
+        const snakeCountDisplay = document.getElementById('snakeCountDisplay');
+        const weaselCountDisplay = document.getElementById('weaselCountDisplay');
         const unlimitedGrassStatDisplay = document.getElementById('unlimitedGrassStatDisplay');
         const limitedGrassStatDisplay = document.getElementById('limitedGrassStatDisplay');
         
@@ -526,7 +678,7 @@
                 valueDisplay.textContent = sliderElement.value;
                 config[configKey] = parseFloat(sliderElement.value);
                 if (configKey === 'initialLimitedGrassPercent') updateInitialLimitedGrassVisuals(); // Real-time update for this slider
-                // Real-time update for initial animal numbers
-                if (['initialNumberSheep', 'initialNumberRabbits', 'initialNumberWolves'].includes(configKey)) {
+                if (['initialNumberPheasant', 'initialNumberRabbits', 'initialNumberSquirrel', 'initialNumberMouse', 'initialNumberEagle', 'initialNumberSnake', 'initialNumberWeasel'].includes(configKey)) {
                     updateInitialAnimalPopulations();
                 }
             });
@@ -543,26 +695,38 @@
                 if (patches.length > 0) {
                     // Consider stopping simulation or prompting for re-setup
                     // For now, just update chart visibility if applicable
-                    if (populationChartInstance) {
+                    if (populationChartInstance && populationChartInstance.data.datasets.length >= 7) { // Check if datasets are initialized
                         // Current dataset order in initChart:
                         // 0: Limited Grass B
-                        // 1: Rabbits
-                        // 2: Sheep
-                        // 3: Wolves
+                        // 1: Pheasants
+                        // 2: Rabbits
+                        // 3: Squirrels
+                        // 4: Mice
+                        // 5: Eagles
+                        // 6: Snakes
+                        // 7: Weasels (if added)
                         if (configKey === 'hasLimitedGrass') {
                             populationChartInstance.data.datasets[0].hidden = !config.hasLimitedGrass;
+                        } else if (configKey === 'hasPheasant') {
+                             populationChartInstance.data.datasets[1].hidden = !config.hasPheasant;
                         } else if (configKey === 'hasRabbit') {
-                             populationChartInstance.data.datasets[1].hidden = !config.hasRabbit;
-                        } else if (configKey === 'hasSheep') {
                             populationChartInstance.data.datasets[2].hidden = !config.hasRabbit;
-                        } else if (configKey === 'hasWolf') {
+                        } else if (configKey === 'hasSquirrel') {
                             populationChartInstance.data.datasets[3].hidden = !config.hasSquirrel;
+                        } else if (configKey === 'hasMouse') {
+                            populationChartInstance.data.datasets[4].hidden = !config.hasMouse;
+                        } else if (configKey === 'hasEagle') {
+                            populationChartInstance.data.datasets[5].hidden = !config.hasEagle;
+                        } else if (configKey === 'hasSnake') {
+                            populationChartInstance.data.datasets[6].hidden = !config.hasSnake;
+                        } else if (configKey === 'hasWeasel' && populationChartInstance.data.datasets[7]) {
+                            populationChartInstance.data.datasets[7].hidden = !config.hasWeasel;
                         }
                         populationChartInstance.update('none');
                     }
                     updateDisplays();
                     if (configKey === 'hasLimitedGrass') updateInitialLimitedGrassVisuals(); // Update visuals when toggling limited grass
-                    // Update animal populations when toggling species
-                    if (['hasSheep', 'hasRabbit', 'hasWolf'].includes(configKey)) {
+                    if (['hasPheasant', 'hasRabbit', 'hasSquirrel', 'hasMouse', 'hasEagle', 'hasSnake', 'hasWeasel'].includes(configKey)) {
                         updateInitialAnimalPopulations();
                     }
                 }
@@ -582,10 +746,14 @@
 
             setControlsDisabled('unlimitedGrassControls', !config.hasUnlimitedGrass);
             setControlsDisabled('limitedGrassControls', !config.hasLimitedGrass);
-            setControlsDisabled('sheepControls', !config.hasSheep);
+            setControlsDisabled('pheasantControls', !config.hasPheasant);
             setControlsDisabled('rabbitControls', !config.hasRabbit);
-            setControlsDisabled('wolfControls', !config.hasWolf);
+            setControlsDisabled('squirrelControls', !config.hasSquirrel);
+            setControlsDisabled('mouseControls', !config.hasMouse);
+            setControlsDisabled('eagleControls', !config.hasEagle);
+            setControlsDisabled('snakeControls', !config.hasSnake);
+            setControlsDisabled('weaselControls', !config.hasWeasel);
         }
 
         function updateInitialLimitedGrassVisuals() {
@@ -611,33 +779,61 @@
             if (patches.length === 0 || simulationRunning) return; // Only if world exists and not running
 
             // Clear existing animal populations
-            sheep = [];
+            pheasants = [];
             rabbits = [];
-            wolves = [];
+            squirrels = [];
+            mice = [];
+            eagles = [];
+            snakes = [];
+            weasels = [];
 
             // Re-populate based on current config, if enabled
-            let sheepInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 4) * 2;
+            // Herbivores
+            let pheasantInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 4) * 2;
             let rabbitInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 3) * 2;
-            let wolfInitialEnergyMax = (config.wolfGainFromFood || config.wolfGainFromRabbitFood || 20) * 2; // Consider both food sources for wolves
-
-            if (config.hasSheep) {
-                for (let i = 0; i < config.initialNumberSheep; i++) {
-                    sheep.push(new Sheep(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * sheepInitialEnergyMax), config));
+            let squirrelInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 3) * 2;
+            let mouseInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 2) * 2;
+            // Carnivores - initial energy could be based on their typical first meal's gain
+            let eagleInitialEnergyMax = (config.eagleGainFromPrey || 15) * 2;
+            let snakeInitialEnergyMax = (config.snakeGainFromPrey || 12) * 2;
+            let weaselInitialEnergyMax = (config.weaselGainFromPrey || 10) * 2;
+
+            if (config.hasPheasant) {
+                for (let i = 0; i < config.initialNumberPheasant; i++) {
+                    pheasants.push(new Pheasant(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * pheasantInitialEnergyMax), config));
                 }
             }
             if (config.hasRabbit) {
                 for (let i = 0; i < config.initialNumberRabbits; i++) {
                     rabbits.push(new Rabbit(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * rabbitInitialEnergyMax), config));
                 }
             }
-            if (config.hasWolf) {
-                for (let i = 0; i < config.initialNumberWolves; i++) {
-                    wolves.push(new Wolf(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * wolfInitialEnergyMax), config));
+            if (config.hasSquirrel) {
+                for (let i = 0; i < config.initialNumberSquirrel; i++) {
+                    squirrels.push(new Squirrel(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * squirrelInitialEnergyMax), config));
+                }
+            }
+            if (config.hasMouse) {
+                for (let i = 0; i < config.initialNumberMouse; i++) {
+                    mice.push(new Mouse(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * mouseInitialEnergyMax), config));
+                }
+            }
+            if (config.hasEagle) {
+                for (let i = 0; i < config.initialNumberEagle; i++) {
+                    eagles.push(new Eagle(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * eagleInitialEnergyMax), config));
+                }
+            }
+            if (config.hasSnake) {
+                for (let i = 0; i < config.initialNumberSnake; i++) {
+                    snakes.push(new Snake(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * snakeInitialEnergyMax), config));
+                }
+            }
+            if (config.hasWeasel) {
+                for (let i = 0; i < config.initialNumberWeasel; i++) {
+                    weasels.push(new Weasel(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * weaselInitialEnergyMax), config));
                 }
             }
 
             drawWorld();
             updateDisplays();
-            // Update the current data point in the chart if it exists
             if (populationChartInstance && chartData.labels.length > 0) {
                 const lastIndex = chartData.labels.length - 1;
-                chartData.sheep[lastIndex] = sheep.length;
-                chartData.rabbits[lastIndex] = rabbits.length;
-                chartData.wolves[lastIndex] = wolves.length;
+                chartData.pheasants[lastIndex] = pheasants.length;
+                chartData.rabbits[lastIndex] = rabbits.length;
+                chartData.squirrels[lastIndex] = squirrels.length;
+                chartData.mice[lastIndex] = mice.length;
+                chartData.eagles[lastIndex] = eagles.length;
+                chartData.snakes[lastIndex] = snakes.length;
+                chartData.weasels[lastIndex] = weasels.length;
                 populationChartInstance.update('none');
             }
         }
@@ -657,26 +853,46 @@
 
         // Setup Listeners for checkboxes
         setupCheckboxListener(selectUnlimitedGrassCheckbox, 'hasUnlimitedGrass', 'unlimitedGrassControls');
         setupCheckboxListener(selectLimitedGrassCheckbox, 'hasLimitedGrass', 'limitedGrassControls');
-        setupCheckboxListener(selectSheepCheckbox, 'hasSheep', 'sheepControls');
+        setupCheckboxListener(selectPheasantCheckbox, 'hasPheasant', 'pheasantControls');
         setupCheckboxListener(selectRabbitCheckbox, 'hasRabbit', 'rabbitControls');
-        setupCheckboxListener(selectWolfCheckbox, 'hasWolf', 'wolfControls');
+        setupCheckboxListener(selectSquirrelCheckbox, 'hasSquirrel', 'squirrelControls');
+        setupCheckboxListener(selectMouseCheckbox, 'hasMouse', 'mouseControls');
+        setupCheckboxListener(selectEagleCheckbox, 'hasEagle', 'eagleControls');
+        setupCheckboxListener(selectSnakeCheckbox, 'hasSnake', 'snakeControls');
+        setupCheckboxListener(selectWeaselCheckbox, 'hasWeasel', 'weaselControls');
 
         // Setup Listeners for sliders
         setupSliderListener(energyFromUnlimitedGrassSlider, 'energyFromUnlimitedGrassValue', 'energyFromUnlimitedGrass');
         setupSliderListener(energyFromLimitedGrassSlider, 'energyFromLimitedGrassValue', 'energyFromLimitedGrass');
         setupSliderListener(initialLimitedGrassPercentSlider, 'initialLimitedGrassPercentValue', 'initialLimitedGrassPercent'); // New
         setupSliderListener(grassRegrowthTimeSlider, 'grassRegrowthTimeValue', 'grassRegrowthTime');
         setupSliderListener(grassCarryingCapacitySlider, 'grassCarryingCapacityValue', 'grassCarryingCapacity');
-        setupSliderListener(sheepSpeedSlider, 'sheepSpeedValue', 'sheepSpeed'); // New
+
+        setupSliderListener(initialNumberPheasantSlider, 'initialNumberPheasantValue', 'initialNumberPheasant');
+        setupSliderListener(pheasantReproduceSlider, 'pheasantReproduceValue', 'pheasantReproduce');
+        setupSliderListener(pheasantSpeedSlider, 'pheasantSpeedValue', 'pheasantSpeed');
+
+        setupSliderListener(initialNumberRabbitsSlider, 'initialNumberRabbitsValue', 'initialNumberRabbits');
+        setupSliderListener(rabbitReproduceSlider, 'rabbitReproduceValue', 'rabbitReproduce');
         setupSliderListener(rabbitSpeedSlider, 'rabbitSpeedValue', 'rabbitSpeed'); // New
-        setupSliderListener(initialNumberSheepSlider, 'initialNumberSheepValue', 'initialNumberSheep');
-        setupSliderListener(sheepReproduceSlider, 'sheepReproduceValue', 'sheepReproduce');
-        setupSliderListener(initialNumberRabbitsSlider, 'initialNumberRabbitsValue', 'initialNumberRabbits');
-        setupSliderListener(rabbitReproduceSlider, 'rabbitReproduceValue', 'rabbitReproduce');
-        setupSliderListener(initialNumberWolvesSlider, 'initialNumberWolvesValue', 'initialNumberWolves');
-        setupSliderListener(wolfGainFromFoodSlider, 'wolfGainFromFoodValue', 'wolfGainFromFood');
-        setupSliderListener(wolfGainFromRabbitFoodSlider, 'wolfGainFromRabbitFoodValue', 'wolfGainFromRabbitFood');
-        setupSliderListener(wolfReproduceSlider, 'wolfReproduceValue', 'wolfReproduce');
-        setupSliderListener(maxWolvesSlider, 'maxWolvesValue', 'maxWolves'); // New
+
+        setupSliderListener(initialNumberSquirrelSlider, 'initialNumberSquirrelValue', 'initialNumberSquirrel');
+        setupSliderListener(squirrelReproduceSlider, 'squirrelReproduceValue', 'squirrelReproduce');
+        setupSliderListener(squirrelSpeedSlider, 'squirrelSpeedValue', 'squirrelSpeed');
+
+        setupSliderListener(initialNumberMouseSlider, 'initialNumberMouseValue', 'initialNumberMouse');
+        setupSliderListener(mouseReproduceSlider, 'mouseReproduceValue', 'mouseReproduce');
+        setupSliderListener(mouseSpeedSlider, 'mouseSpeedValue', 'mouseSpeed');
+
+        setupSliderListener(initialNumberEagleSlider, 'initialNumberEagleValue', 'initialNumberEagle');
+        setupSliderListener(eagleGainFromPreySlider, 'eagleGainFromPreyValue', 'eagleGainFromPrey');
+        setupSliderListener(eagleReproduceSlider, 'eagleReproduceValue', 'eagleReproduce');
+        setupSliderListener(maxEaglesSlider, 'maxEaglesValue', 'maxEagles');
+
+        setupSliderListener(initialNumberSnakeSlider, 'initialNumberSnakeValue', 'initialNumberSnake');
+        setupSliderListener(snakeGainFromPreySlider, 'snakeGainFromPreyValue', 'snakeGainFromPrey');
+        setupSliderListener(snakeReproduceSlider, 'snakeReproduceValue', 'snakeReproduce');
+
+        setupSliderListener(initialNumberWeaselSlider, 'initialNumberWeaselValue', 'initialNumberWeasel');
+        setupSliderListener(weaselGainFromPreySlider, 'weaselGainFromPreyValue', 'weaselGainFromPrey');
+        setupSliderListener(weaselReproduceSlider, 'weaselReproduceValue', 'weaselReproduce');
+
         setupSliderListener(maxHerbivoresSlider, 'maxHerbivoresValue', 'maxHerbivores');
         setupSliderListener(baseEnergyCostSlider, 'baseEnergyCostValue', 'baseEnergyCost'); // New
         setupSliderListener(reproductionEnergyCostFactorSlider, 'reproductionEnergyCostFactorValue', 'reproductionEnergyCostFactor'); // New
@@ -761,22 +977,22 @@
             }
         }
 
-        class Sheep extends Herbivore {
+        class Pheasant extends Herbivore { // Was Sheep
             constructor(x, y, energy, configRef) {
-                super(x, y, energy, 'sheep', configRef);
-                this.speed = this.config.sheepSpeed;
-                this.reproductionRate = this.config.sheepReproduce;
+                super(x, y, energy, 'pheasant', configRef);
+                this.speed = this.config.pheasantSpeed;
+                this.reproductionRate = this.config.pheasantReproduce;
             }
 
             draw(ctx, patchSize, showEnergyFlag) {
                 const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
                 const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
                 ctx.font = `${agentFontSize}px Arial`;
-                ctx.fillText(SHEEP_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                ctx.fillText(PHEASANT_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
                 if (showEnergyFlag) {
-                    ctx.fillStyle = SHEEP_ENERGY_COLOR;
+                    ctx.fillStyle = PHEASANT_ENERGY_COLOR;
                     ctx.font = `${energyFontSize}px Arial`;
                     ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
                 }
@@ -802,57 +1018,161 @@
             }
         }
 
-        class Wolf extends Entity {
+        class Squirrel extends Herbivore {
             constructor(x, y, energy, configRef) {
-                super(x, y, energy, 'wolf', configRef);
-                this.reproductionRate = this.config.wolfReproduce;
-                this.speed = this.config.wolfSpeed || 1; // Assuming wolfSpeed might be added to config, else 1.
-            }
-
-            hunt(sheepList, rabbitList) {
+                super(x, y, energy, 'squirrel', configRef);
+                this.speed = this.config.squirrelSpeed;
+                this.reproductionRate = this.config.squirrelReproduce;
+            }
+            draw(ctx, patchSize, showEnergyFlag) {
+                const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
+                const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
+                ctx.font = `${agentFontSize}px Arial`;
+                ctx.fillText(SQUIRREL_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                if (showEnergyFlag) {
+                    ctx.fillStyle = SQUIRREL_ENERGY_COLOR;
+                    ctx.font = `${energyFontSize}px Arial`;
+                    ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
+                }
+            }
+        }
+
+        class Mouse extends Herbivore {
+            constructor(x, y, energy, configRef) {
+                super(x, y, energy, 'mouse', configRef);
+                this.speed = this.config.mouseSpeed;
+                this.reproductionRate = this.config.mouseReproduce;
+            }
+            draw(ctx, patchSize, showEnergyFlag) {
+                const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
+                const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
+                ctx.font = `${agentFontSize}px Arial`;
+                ctx.fillText(MOUSE_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                if (showEnergyFlag) {
+                    ctx.fillStyle = MOUSE_ENERGY_COLOR;
+                    ctx.font = `${energyFontSize}px Arial`;
+                    ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
+                }
+            }
+        }
+
+        // Base class for carnivores
+        class Carnivore extends Entity {
+            constructor(x, y, energy, type, configRef) {
+                super(x, y, energy, type, configRef);
+                this.speed = 1; // Default, set by subclass
+                this.reproductionRate = 0; // Default, set by subclass
+                this.energyFromPrey = 0; // Default, set by subclass
+                this.maxPopulation = Infinity; // Default, set by subclass if applicable
+            }
+
+            // Generic hunt method, to be potentially overridden or specialized
+            // preyLists is an object like { snakes: snakesArray, pheasants: pheasantsArray, ... }
+            hunt(preyLists) {
                 let ate = false;
-                if (this.config.hasSheep && sheepList.length > 0) {
-                    for (let i = sheepList.length - 1; i >= 0; i--) {
-                        const s = sheepList[i];
-                        if (s.x === this.x && s.y === this.y) {
-                            this.gainEnergy(this.config.wolfGainFromFood);
-                            sheepList.splice(i, 1); // Remove sheep
-                            ate = true;
-                            break;
+                // This base hunt method is a placeholder. Each carnivore will implement its specific prey.
+                return ate;
+            }
+
+            reproduce(currentPopulation) {
+                let offspring = null;
+                if (Math.random() * 100 < this.reproductionRate && currentPopulation < this.maxPopulation) {
+                    this.energy /= this.config.reproductionEnergyCostFactor;
+                    offspring = new this.constructor(this.x, this.y, this.energy, this.config);
+                    if (offspring) offspring.move();
+                }
+                return offspring;
+            }
+
+            update(patches, preyLists, ownList) { // preyLists is an object of arrays
+                this.updateBase();
+                for (let moveCount = 0; moveCount < this.speed; moveCount++) {
+                    this.move();
+                }
+                this.hunt(preyLists); // hunt method needs to be implemented by subclasses
+
+                let newOffspring = null;
+                if (this.isAlive()) {
+                    newOffspring = this.reproduce(ownList.length);
+                }
+                return newOffspring;
+            }
+        }
+
+
+        class Eagle extends Carnivore { // Was Wolf
+            constructor(x, y, energy, configRef) {
+                super(x, y, energy, 'eagle', configRef);
+                this.reproductionRate = this.config.eagleReproduce;
+                this.speed = this.config.eagleSpeed || 2; // Default speed for eagle
+                this.energyFromPrey = this.config.eagleGainFromPrey;
+                this.maxPopulation = this.config.maxEagles;
+            }
+
+            hunt(preyLists) { // preyLists: { snakes, pheasants, squirrels, mice, rabbits }
+                let ate = false;
+                const preyTypes = [ // Order of preference or attempt
+                    { list: preyLists.snakes, gain: this.energyFromPrey * 1.2, enabled: this.config.hasSnake }, // Example: snakes worth more
+                    { list: preyLists.pheasants, gain: this.energyFromPrey, enabled: this.config.hasPheasant },
+                    { list: preyLists.rabbits, gain: this.energyFromPrey * 0.9, enabled: this.config.hasRabbit },
+                    { list: preyLists.squirrels, gain: this.energyFromPrey * 0.7, enabled: this.config.hasSquirrel },
+                    { list: preyLists.mice, gain: this.energyFromPrey * 0.6, enabled: this.config.hasMouse }
+                ];
+
+                for (const prey of preyTypes) {
+                    if (ate) break;
+                    if (prey.enabled && prey.list && prey.list.length > 0) {
+                        for (let i = prey.list.length - 1; i >= 0; i--) {
+                            const p = prey.list[i];
+                            if (p.x === this.x && p.y === this.y) {
+                                this.gainEnergy(prey.gain);
+                                prey.list.splice(i, 1);
+                                ate = true;
+                                break;
+                            }
                         }
                     }
                 }
-                if (!ate && this.config.hasRabbit && rabbitList.length > 0) {
-                    for (let i = rabbitList.length - 1; i >= 0; i--) {
-                        const r = rabbitList[i];
-                        if (r.x === this.x && r.y === this.y) {
-                            this.gainEnergy(this.config.wolfGainFromRabbitFood);
-                            rabbitList.splice(i, 1); // Remove rabbit
-                            ate = true;
-                            break;
-                        }
-                    }
-                }
                 return ate;
             }
 
-            reproduce(currentWolfCount) {
-                let offspring = null;
-                if (Math.random() * 100 < this.reproductionRate && currentWolfCount < this.config.maxWolves) {
-                    this.energy /= this.config.reproductionEnergyCostFactor;
-                    offspring = new Wolf(this.x, this.y, this.energy, this.config);
-                    if (offspring) offspring.move();
-                }
-                return offspring;
-            }
-
-            update(patches, sheepList, rabbitList, wolfList) { // Patches for consistency, not directly used by wolf
-                this.updateBase(); // Entity's base energy cost
-
-                for (let moveCount = 0; moveCount < this.speed; moveCount++) {
-                    this.move();
-                }
-                this.hunt(sheepList, rabbitList);
-
-                let newOffspring = null;
-                if (this.isAlive()) {
-                    newOffspring = this.reproduce(wolfList.length);
-                }
-                return newOffspring;
-            }
-
             draw(ctx, patchSize, showEnergyFlag) {
                 const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
                 const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
                 ctx.font = `${agentFontSize}px Arial`;
-                ctx.fillText(WOLF_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                ctx.fillText(EAGLE_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
                 if (showEnergyFlag) {
-                    ctx.fillStyle = WOLF_ENERGY_COLOR;
+                    ctx.fillStyle = EAGLE_ENERGY_COLOR;
                     ctx.font = `${energyFontSize}px Arial`;
                     ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
                 }
             }
         }
+
+        class Snake extends Carnivore {
+            constructor(x, y, energy, configRef) {
+                super(x, y, energy, 'snake', configRef);
+                this.reproductionRate = this.config.snakeReproduce;
+                this.speed = this.config.snakeSpeed || 1;
+                this.energyFromPrey = this.config.snakeGainFromPrey;
+                // No maxPopulation defined in config, so uses Infinity from Carnivore
+            }
+            hunt(preyLists) { // preyLists: { squirrels, mice, rabbits }
+                let ate = false;
+                const preyTypes = [
+                    { list: preyLists.rabbits, gain: this.energyFromPrey * 1.1, enabled: this.config.hasRabbit },
+                    { list: preyLists.squirrels, gain: this.energyFromPrey, enabled: this.config.hasSquirrel },
+                    { list: preyLists.mice, gain: this.energyFromPrey * 0.9, enabled: this.config.hasMouse }
+                ];
+                // ... (similar hunting loop as Eagle)
+                for (const prey of preyTypes) { /* ... */ if (ate) break; if (prey.enabled && prey.list && prey.list.length > 0) { for (let i = prey.list.length - 1; i >= 0; i--) { const p = prey.list[i]; if (p.x === this.x && p.y === this.y) { this.gainEnergy(prey.gain); prey.list.splice(i, 1); ate = true; break; }}}}
+                return ate;
+            }
+             draw(ctx, patchSize, showEnergyFlag) {
+                const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
+                const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
+                ctx.font = `${agentFontSize}px Arial`;
+                ctx.fillText(SNAKE_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                if (showEnergyFlag) {
+                    ctx.fillStyle = SNAKE_ENERGY_COLOR;
+                    ctx.font = `${energyFontSize}px Arial`;
+                    ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
+                }
+            }
+        }
+
+        class Weasel extends Carnivore {
+            constructor(x, y, energy, configRef) {
+                super(x, y, energy, 'weasel', configRef);
+                this.reproductionRate = this.config.weaselReproduce;
+                this.speed = this.config.weaselSpeed || 2;
+                this.energyFromPrey = this.config.weaselGainFromPrey;
+            }
+            hunt(preyLists) { // preyLists: { squirrels, mice, rabbits, pheasants }
+                let ate = false;
+                const preyTypes = [
+                    { list: preyLists.pheasants, gain: this.energyFromPrey * 1.2, enabled: this.config.hasPheasant },
+                    { list: preyLists.rabbits, gain: this.energyFromPrey * 1.1, enabled: this.config.hasRabbit },
+                    { list: preyLists.squirrels, gain: this.energyFromPrey, enabled: this.config.hasSquirrel },
+                    { list: preyLists.mice, gain: this.energyFromPrey * 0.9, enabled: this.config.hasMouse }
+                ];
+                // ... (similar hunting loop as Eagle)
+                for (const prey of preyTypes) { /* ... */ if (ate) break; if (prey.enabled && prey.list && prey.list.length > 0) { for (let i = prey.list.length - 1; i >= 0; i--) { const p = prey.list[i]; if (p.x === this.x && p.y === this.y) { this.gainEnergy(prey.gain); prey.list.splice(i, 1); ate = true; break; }}}}
+                return ate;
+            }
+            draw(ctx, patchSize, showEnergyFlag) {
+                const agentFontSize = patchSize * AGENT_FONT_SIZE_MULTIPLIER;
+                const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
+                ctx.font = `${agentFontSize}px Arial`;
+                ctx.fillText(WEASEL_ICON, (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + AGENT_CENTER_Y_OFFSET) * patchSize);
+                if (showEnergyFlag) {
+                    ctx.fillStyle = WEASEL_ENERGY_COLOR;
+                    ctx.font = `${energyFontSize}px Arial`;
+                    ctx.fillText(Math.round(this.energy), (this.x + AGENT_CENTER_X_OFFSET) * patchSize, (this.y + ENERGY_TEXT_Y_OFFSET_FACTOR) * patchSize);
+                }
+            }
+        }
+
 
         function calculateCurrentGrassCount() { // Same as before
             if (!config.hasLimitedGrass || !patches.length) return 0;
@@ -832,11 +1232,15 @@
                 data: {
                     labels: chartData.labels,
                     datasets: [
-                        { label: '有限草B', data: chartData.grass, borderColor: 'rgb(75, 192, 75)', backgroundColor: 'rgba(75, 192, 75, 0.1)', tension: 0.1, hidden: !config.hasLimitedGrass, pointRadius: 0, borderWidth: 1.5 },                    
-                        { label: '兔群', data: chartData.rabbits, borderColor: 'rgb(153, 102, 255)', backgroundColor: 'rgba(153, 102, 255, 0.1)', tension: 0.1, pointRadius: 0, borderWidth: 1.5, hidden: !config.hasRabbit },                        
-                        { label: '羊群', data: chartData.sheep, borderColor: 'rgb(54, 162, 235)', backgroundColor: 'rgba(54, 162, 235, 0.1)', tension: 0.1, pointRadius: 0, borderWidth: 1.5, hidden: !config.hasSheep },
-                        { label: '狼群', data: chartData.wolves, borderColor: 'rgb(255, 99, 132)', backgroundColor: 'rgba(255, 99, 132, 0.1)', tension: 0.1, pointRadius: 0, borderWidth: 1.5, hidden: !config.hasWolf }
+                        { label: '有限草B', data: chartData.grass, borderColor: 'rgb(75, 192, 75)', backgroundColor: 'rgba(75, 192, 75, 0.1)', tension: 0.1, hidden: !config.hasLimitedGrass, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '雉雞', data: chartData.pheasants, borderColor: PHEASANT_ENERGY_COLOR, backgroundColor: 'rgba(0,0,255,0.1)', tension: 0.1, hidden: !config.hasPheasant, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '兔群', data: chartData.rabbits, borderColor: RABBIT_ENERGY_COLOR, backgroundColor: 'rgba(153,102,255,0.1)', tension: 0.1, hidden: !config.hasRabbit, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '松鼠', data: chartData.squirrels, borderColor: SQUIRREL_ENERGY_COLOR, backgroundColor: 'rgba(139,69,19,0.1)', tension: 0.1, hidden: !config.hasSquirrel, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '老鼠', data: chartData.mice, borderColor: MOUSE_ENERGY_COLOR, backgroundColor: 'rgba(128,128,128,0.1)', tension: 0.1, hidden: !config.hasMouse, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '老鷹', data: chartData.eagles, borderColor: EAGLE_ENERGY_COLOR, backgroundColor: 'rgba(255,0,0,0.1)', tension: 0.1, hidden: !config.hasEagle, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '蛇', data: chartData.snakes, borderColor: SNAKE_ENERGY_COLOR, backgroundColor: 'rgba(0,128,0,0.1)', tension: 0.1, hidden: !config.hasSnake, pointRadius: 0, borderWidth: 1.5 },
+                        { label: '黃鼠狼', data: chartData.weasels, borderColor: WEASEL_ENERGY_COLOR, backgroundColor: 'rgba(210,105,30,0.1)', tension: 0.1, hidden: !config.hasWeasel, pointRadius: 0, borderWidth: 1.5 },
                     ]
                 },
                 options: {
@@ -865,12 +1269,12 @@
             energyPyramidChartInstance = new Chart(ctxEnergyChart, {
                 type: 'bar',
                 data: {
-                    labels: ['次級消費者 (狼)', '初級消費者 (羊+兔)', '生產者 (草B)'],
+                    labels: ['肉食動物', '草食動物', '生產者 (草B)'], // Updated labels
                     datasets: [{
                         label: '總能量',
-                        data: [energies.secondaryConsumer, energies.primaryConsumer, energies.producer],
+                        data: [energies.carnivores, energies.herbivores, energies.producer], // Updated data structure
                         backgroundColor: [
-                            'rgba(255, 99, 132, 0.7)',  // Red for secondary consumers
+                            'rgba(255, 99, 132, 0.7)',  // Red for carnivores
                             'rgba(255, 159, 64, 0.7)', // Orange for primary consumers
                             'rgba(75, 192, 75, 0.7)',  // Green for producers
                         ],
@@ -893,7 +1297,15 @@
             stopSimulation();
             clearSimulationMessage();
             patchSize = simCanvasElement.width / worldWidth; 
-            ticks = 0; sheep = []; wolves = []; rabbits = []; patches = []; // Initialize rabbits array
+            ticks = 0; 
+            pheasants = []; 
+            rabbits = []; 
+            squirrels = []; 
+            mice = []; 
+            eagles = []; 
+            snakes = []; 
+            weasels = [];
+            patches = [];
 
             for (let i = 0; i < worldWidth; i++) {
                 patches[i] = [];
@@ -909,38 +1321,60 @@
                 }
             }
 
-            let sheepInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 4) * 2;
+            // Initial energy calculations (already in updateInitialAnimalPopulations, but good to be explicit here too for setup)
+            let pheasantInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 4) * 2;
             let rabbitInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 3) * 2;
-            let wolfInitialEnergyMax = (config.wolfGainFromFood || config.wolfGainFromRabbitFood || 20) * 2; // Made consistent
-
-            if (config.hasSheep) {
-                for (let i = 0; i < config.initialNumberSheep; i++) {
-                    sheep.push(new Sheep(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * sheepInitialEnergyMax), config));
-                }
-            }
-            if (config.hasRabbit && config.initialNumberRabbits > 0) {
+            let squirrelInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 3) * 2;
+            let mouseInitialEnergyMax = (config.energyFromLimitedGrass || config.energyFromUnlimitedGrass || 2) * 2;
+            let eagleInitialEnergyMax = (config.eagleGainFromPrey || 15) * 2;
+            let snakeInitialEnergyMax = (config.snakeGainFromPrey || 12) * 2;
+            let weaselInitialEnergyMax = (config.weaselGainFromPrey || 10) * 2;
+
+            if (config.hasPheasant) {
+                for (let i = 0; i < config.initialNumberPheasant; i++) {
+                    pheasants.push(new Pheasant(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * pheasantInitialEnergyMax), config));
+                }
+            }
+            if (config.hasRabbit) { // No need for > 0 check, loop handles it
                 for (let i = 0; i < config.initialNumberRabbits; i++) {
                     rabbits.push(new Rabbit(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * rabbitInitialEnergyMax), config));
                 }
             }
-            if (config.hasWolf) {
-                for (let i = 0; i < config.initialNumberWolves; i++) {
-                    wolves.push(new Wolf(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * wolfInitialEnergyMax), config));
+            if (config.hasSquirrel) {
+                for (let i = 0; i < config.initialNumberSquirrel; i++) {
+                    squirrels.push(new Squirrel(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * squirrelInitialEnergyMax), config));
+                }
+            }
+            if (config.hasMouse) {
+                for (let i = 0; i < config.initialNumberMouse; i++) {
+                    mice.push(new Mouse(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * mouseInitialEnergyMax), config));
+                }
+            }
+            if (config.hasEagle) {
+                for (let i = 0; i < config.initialNumberEagle; i++) {
+                    eagles.push(new Eagle(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * eagleInitialEnergyMax), config));
+                }
+            }
+            if (config.hasSnake) {
+                for (let i = 0; i < config.initialNumberSnake; i++) {
+                    snakes.push(new Snake(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * snakeInitialEnergyMax), config));
+                }
+            }
+            if (config.hasWeasel) {
+                for (let i = 0; i < config.initialNumberWeasel; i++) {
+                    weasels.push(new Weasel(Math.floor(Math.random() * worldWidth), Math.floor(Math.random() * worldHeight), Math.floor(Math.random() * weaselInitialEnergyMax), config));
                 }
             }
             
             if (currentVisibleChart === 'population') {
                 chartData.labels = [ticks]; 
-                chartData.sheep = [sheep.length]; 
-                chartData.wolves = [wolves.length]; 
-                chartData.rabbits = [rabbits.length];
                 chartData.grass = [config.hasLimitedGrass ? calculateCurrentGrassCount() : 0];
+                chartData.pheasants = [pheasants.length];
+                chartData.rabbits = [rabbits.length];
+                chartData.squirrels = [squirrels.length];
+                chartData.mice = [mice.length];
+                chartData.eagles = [eagles.length];
+                chartData.snakes = [snakes.length];
+                chartData.weasels = [weasels.length];
                 
                 if (!populationChartInstance) initPopulationChart();
                 else { 
                     populationChartInstance.data.labels = chartData.labels;
                     populationChartInstance.data.datasets[0].data = chartData.grass; 
-                    populationChartInstance.data.datasets[1].data = chartData.rabbits; 
-                    populationChartInstance.data.datasets[2].data = chartData.sheep;
-                    populationChartInstance.data.datasets[3].data = chartData.wolves;
+                    populationChartInstance.data.datasets[1].data = chartData.pheasants;
+                    populationChartInstance.data.datasets[2].data = chartData.rabbits;
+                    populationChartInstance.data.datasets[3].data = chartData.squirrels;
+                    populationChartInstance.data.datasets[4].data = chartData.mice;
+                    populationChartInstance.data.datasets[5].data = chartData.eagles;
+                    populationChartInstance.data.datasets[6].data = chartData.snakes;
+                    if (populationChartInstance.data.datasets[7]) populationChartInstance.data.datasets[7].data = chartData.weasels;
 
                     populationChartInstance.data.datasets[0].hidden = !config.hasLimitedGrass;
-                    populationChartInstance.data.datasets[1].hidden = !config.hasRabbit;
-                    populationChartInstance.data.datasets[2].hidden = !config.hasSheep;
-                    populationChartInstance.data.datasets[3].hidden = !config.hasWolf;
+                    populationChartInstance.data.datasets[1].hidden = !config.hasPheasant;
+                    populationChartInstance.data.datasets[2].hidden = !config.hasRabbit;
+                    populationChartInstance.data.datasets[3].hidden = !config.hasSquirrel;
+                    populationChartInstance.data.datasets[4].hidden = !config.hasMouse;
+                    populationChartInstance.data.datasets[5].hidden = !config.hasEagle;
+                    populationChartInstance.data.datasets[6].hidden = !config.hasSnake;
+                    if (populationChartInstance.data.datasets[7]) populationChartInstance.data.datasets[7].hidden = !config.hasWeasel;
                     populationChartInstance.update('none');
                 }
             } else if (currentVisibleChart === 'energyPyramid') {
@@ -959,12 +1393,18 @@
             selectLimitedGrassCheckbox.checked = config.hasLimitedGrass;
             selectLimitedGrassCheckbox.dispatchEvent(new Event('change'));
-            selectSheepCheckbox.checked = config.hasSheep;
-            selectSheepCheckbox.dispatchEvent(new Event('change'));
+            selectPheasantCheckbox.checked = config.hasPheasant;
+            selectPheasantCheckbox.dispatchEvent(new Event('change'));
             selectRabbitCheckbox.checked = config.hasRabbit;
             selectRabbitCheckbox.dispatchEvent(new Event('change'));
-            selectWolfCheckbox.checked = config.hasWolf;
-            selectWolfCheckbox.dispatchEvent(new Event('change'));
+            selectSquirrelCheckbox.checked = config.hasSquirrel;
+            selectSquirrelCheckbox.dispatchEvent(new Event('change'));
+            selectMouseCheckbox.checked = config.hasMouse;
+            selectMouseCheckbox.dispatchEvent(new Event('change'));
+            selectEagleCheckbox.checked = config.hasEagle;
+            selectEagleCheckbox.dispatchEvent(new Event('change'));
+            selectSnakeCheckbox.checked = config.hasSnake;
+            selectSnakeCheckbox.dispatchEvent(new Event('change'));
+            selectWeaselCheckbox.checked = config.hasWeasel;
+            selectWeaselCheckbox.dispatchEvent(new Event('change'));
             showEnergyCheckbox.checked = config.showEnergy;
             showEnergyCheckbox.dispatchEvent(new Event('change'));
             autoScaleYAxisCheckbox.checked = config.autoScaleYAxis;
@@ -977,18 +1417,29 @@
                 { el: initialLimitedGrassPercentSlider, key: 'initialLimitedGrassPercent' },
                 { el: grassRegrowthTimeSlider, key: 'grassRegrowthTime' },
                 { el: grassCarryingCapacitySlider, key: 'grassCarryingCapacity' },
-                { el: initialNumberSheepSlider, key: 'initialNumberSheep' },
-                { el: sheepReproduceSlider, key: 'sheepReproduce' },
-                { el: initialNumberRabbitsSlider, key: 'initialNumberRabbits' },
-                { el: sheepSpeedSlider, key: 'sheepSpeed' }, // New
+                { el: initialNumberPheasantSlider, key: 'initialNumberPheasant' },
+                { el: pheasantReproduceSlider, key: 'pheasantReproduce' },
+                { el: pheasantSpeedSlider, key: 'pheasantSpeed' },
+                { el: initialNumberRabbitsSlider, key: 'initialNumberRabbits' },
                 { el: rabbitSpeedSlider, key: 'rabbitSpeed' }, // New
                 { el: rabbitReproduceSlider, key: 'rabbitReproduce' },
-                { el: initialNumberWolvesSlider, key: 'initialNumberWolves' },
-                { el: wolfGainFromFoodSlider, key: 'wolfGainFromFood' },
-                { el: wolfGainFromRabbitFoodSlider, key: 'wolfGainFromRabbitFood' },
-                { el: wolfReproduceSlider, key: 'wolfReproduce' },
-                { el: maxWolvesSlider, key: 'maxWolves' }, // New
+                { el: initialNumberSquirrelSlider, key: 'initialNumberSquirrel' },
+                { el: squirrelReproduceSlider, key: 'squirrelReproduce' },
+                { el: squirrelSpeedSlider, key: 'squirrelSpeed' },
+                { el: initialNumberMouseSlider, key: 'initialNumberMouse' },
+                { el: mouseReproduceSlider, key: 'mouseReproduce' },
+                { el: mouseSpeedSlider, key: 'mouseSpeed' },
+                { el: initialNumberEagleSlider, key: 'initialNumberEagle' },
+                { el: eagleGainFromPreySlider, key: 'eagleGainFromPrey' },
+                { el: eagleReproduceSlider, key: 'eagleReproduce' },
+                { el: maxEaglesSlider, key: 'maxEagles' },
+                { el: initialNumberSnakeSlider, key: 'initialNumberSnake' },
+                { el: snakeGainFromPreySlider, key: 'snakeGainFromPrey' },
+                { el: snakeReproduceSlider, key: 'snakeReproduce' },
+                { el: initialNumberWeaselSlider, key: 'initialNumberWeasel' },
+                { el: weaselGainFromPreySlider, key: 'weaselGainFromPrey' },
+                { el: weaselReproduceSlider, key: 'weaselReproduce' },
                 { el: maxHerbivoresSlider, key: 'maxHerbivores' },
                 { el: baseEnergyCostSlider, key: 'baseEnergyCost' }, // New
                 { el: reproductionEnergyCostFactorSlider, key: 'reproductionEnergyCostFactor' } // New
@@ -1008,58 +1459,121 @@
 
         function calculateTrophicEnergies() {
             const producerEnergy = config.hasLimitedGrass ? calculateCurrentGrassCount() * config.energyFromLimitedGrass : 0;
-            
-            const sheepEnergy = config.hasSheep ? sheep.reduce((sum, s) => sum + Math.max(0, s.energy), 0) : 0;
+
+            const pheasantEnergy = config.hasPheasant ? pheasants.reduce((sum, p) => sum + Math.max(0, p.energy), 0) : 0;
             const rabbitEnergy = config.hasRabbit ? rabbits.reduce((sum, r) => sum + Math.max(0, r.energy), 0) : 0;
-            const primaryConsumerEnergy = sheepEnergy + rabbitEnergy;
-
-            const secondaryConsumerEnergy = config.hasWolf ? wolves.reduce((sum, w) => sum + Math.max(0, w.energy), 0) : 0;
-
-            return { producer: producerEnergy, primaryConsumer: primaryConsumerEnergy, secondaryConsumer: secondaryConsumerEnergy };
+            const squirrelEnergy = config.hasSquirrel ? squirrels.reduce((sum, sq) => sum + Math.max(0, sq.energy), 0) : 0;
+            const mouseEnergy = config.hasMouse ? mice.reduce((sum, m) => sum + Math.max(0, m.energy), 0) : 0;
+            const herbivoreEnergy = pheasantEnergy + rabbitEnergy + squirrelEnergy + mouseEnergy;
+
+            const eagleEnergy = config.hasEagle ? eagles.reduce((sum, e) => sum + Math.max(0, e.energy), 0) : 0;
+            const snakeEnergy = config.hasSnake ? snakes.reduce((sum, sn) => sum + Math.max(0, sn.energy), 0) : 0;
+            const weaselEnergy = config.hasWeasel ? weasels.reduce((sum, w) => sum + Math.max(0, w.energy), 0) : 0;
+            const carnivoreEnergy = eagleEnergy + snakeEnergy + weaselEnergy;
+
+            return { producer: producerEnergy, herbivores: herbivoreEnergy, carnivores: carnivoreEnergy };
         }
 
         function go() {
-            let activeAnimalTypes = (config.hasSheep && sheep.length > 0) || 
-                                  (config.hasRabbit && rabbits.length > 0) || 
-                                  (config.hasWolf && wolves.length > 0);
-            let anySelectableAnimalExists = (config.hasSheep && sheep.length > 0) ||
+            let anySelectableAnimalExists = (config.hasPheasant && pheasants.length > 0) ||
                                           (config.hasRabbit && rabbits.length > 0) ||
-                                          (config.hasWolf && wolves.length > 0);
-            let anyAnimalSelected = config.hasSheep || config.hasRabbit || config.hasWolf;
+                                          (config.hasSquirrel && squirrels.length > 0) ||
+                                          (config.hasMouse && mice.length > 0) ||
+                                          (config.hasEagle && eagles.length > 0) ||
+                                          (config.hasSnake && snakes.length > 0) ||
+                                          (config.hasWeasel && weasels.length > 0);
+            let anyAnimalSelected = config.hasPheasant || config.hasRabbit || config.hasSquirrel || config.hasMouse || 
+                                  config.hasEagle || config.hasSnake || config.hasWeasel;
 
             if (anyAnimalSelected && !anySelectableAnimalExists) {
-                //  alert("所有選定的動物都消失了，模擬停止。"); 
                  displaySimulationMessage("所有選定的動物都消失了，模擬停止。");
                  stopSimulation(); return;
             }
 
-            let totalHerbivores = (config.hasSheep ? sheep.length : 0) + (config.hasRabbit ? rabbits.length : 0);
-            let wolvesEffectivelyExtinct = config.hasWolf ? wolves.length === 0 : true;
-
-            if (wolvesEffectivelyExtinct && totalHerbivores > config.maxHerbivores && (config.hasSheep || config.hasRabbit)) {
+            let totalHerbivores = (config.hasPheasant ? pheasants.length : 0) + 
+                                (config.hasRabbit ? rabbits.length : 0) +
+                                (config.hasSquirrel ? squirrels.length : 0) +
+                                (config.hasMouse ? mice.length : 0);
+            
+            // Check if all *selected* carnivore types are extinct
+            let allSelectedCarnivoresExtinct = true;
+            if (config.hasEagle && eagles.length > 0) allSelectedCarnivoresExtinct = false;
+            if (config.hasSnake && snakes.length > 0) allSelectedCarnivoresExtinct = false;
+            if (config.hasWeasel && weasels.length > 0) allSelectedCarnivoresExtinct = false;
+            // If no carnivores are selected at all, consider them "extinct" for this check
+            if (!config.hasEagle && !config.hasSnake && !config.hasWeasel) allSelectedCarnivoresExtinct = true;
+
+
+            if (allSelectedCarnivoresExtinct && totalHerbivores > config.maxHerbivores && (config.hasPheasant || config.hasRabbit || config.hasSquirrel || config.hasMouse)) {
                 displaySimulationMessage("草食動物數量過多，牠們佔滿了這片土地！模擬停止。"); stopSimulation(); return;
             }
 
-            let newOffspring = { sheep: [], rabbits: [], wolves: [] };
-
-            // --- Update Sheep ---
-            if (config.hasSheep) {
-                const currentTotalHerbivores = sheep.length + rabbits.length;
-                for (let i = sheep.length - 1; i >= 0; i--) {
-                    const s = sheep[i];
+            let newOffspring = { pheasants: [], rabbits: [], squirrels: [], mice: [], eagles: [], snakes: [], weasels: [] };
+            const currentTotalHerbivores = pheasants.length + rabbits.length + squirrels.length + mice.length;
+
+            // --- Update Herbivores ---
+            if (config.hasPheasant) {
+                for (let i = pheasants.length - 1; i >= 0; i--) {
+                    const s = pheasants[i];
                     const offspring = s.update(patches, currentTotalHerbivores);
-                    if (offspring) newOffspring.sheep.push(offspring);
+                    if (offspring) newOffspring.pheasants.push(offspring);
                     if (!s.isAlive()) {
-                        sheep.splice(i, 1);
+                        pheasants.splice(i, 1);
                     }
                 }
             }
-
-            // --- Update Rabbits ---
             if (config.hasRabbit) {
-                // Recalculate in case sheep died/reproduced, affecting total for rabbit reproduction check
-                const currentTotalHerbivores = sheep.length + rabbits.length; 
                 for (let i = rabbits.length - 1; i >= 0; i--) {
                     const r = rabbits[i];
                     const offspring = r.update(patches, currentTotalHerbivores);
                     if (offspring) newOffspring.rabbits.push(offspring);
                     if (!r.isAlive()) {
                         rabbits.splice(i, 1);
+                    }
+                }
+            }
+            if (config.hasSquirrel) {
+                for (let i = squirrels.length - 1; i >= 0; i--) {
+                    const sq = squirrels[i];
+                    const offspring = sq.update(patches, currentTotalHerbivores);
+                    if (offspring) newOffspring.squirrels.push(offspring);
+                    if (!sq.isAlive()) {
+                        squirrels.splice(i, 1);
+                    }
+                }
+            }
+            if (config.hasMouse) {
+                for (let i = mice.length - 1; i >= 0; i--) {
+                    const m = mice[i];
+                    const offspring = m.update(patches, currentTotalHerbivores);
+                    if (offspring) newOffspring.mice.push(offspring);
+                    if (!m.isAlive()) {
+                        mice.splice(i, 1);
                     }
                 }
             }
             
-            // --- Update Wolves ---
-            if (config.hasWolf) {
-                for (let i = wolves.length - 1; i >= 0; i--) {
-                    const w = wolves[i];
-                    const offspring = w.update(patches, sheep, rabbits, wolves); // Wolves hunt from sheep/rabbits lists
-                    if (offspring) newOffspring.wolves.push(offspring);
+            // --- Update Carnivores ---
+            const preyListsForCarnivores = { pheasants, rabbits, squirrels, mice, snakes }; // Snakes can be prey for eagles
+
+            if (config.hasEagle) {
+                for (let i = eagles.length - 1; i >= 0; i--) {
+                    const e = eagles[i];
+                    const offspring = e.update(patches, preyListsForCarnivores, eagles);
+                    if (offspring) newOffspring.eagles.push(offspring);
+                    if (!e.isAlive()) {
+                        eagles.splice(i, 1);
+                    }
+                }
+            }
+            if (config.hasSnake) {
+                for (let i = snakes.length - 1; i >= 0; i--) {
+                    const sn = snakes[i];
+                    const offspring = sn.update(patches, preyListsForCarnivores, snakes);
+                    if (offspring) newOffspring.snakes.push(offspring);
+                    if (!sn.isAlive()) {
+                        snakes.splice(i, 1);
+                    }
+                }
+            }
+            if (config.hasWeasel) {
+                for (let i = weasels.length - 1; i >= 0; i--) {
+                    const w = weasels[i];
+                    const offspring = w.update(patches, preyListsForCarnivores, weasels);
+                    if (offspring) newOffspring.weasels.push(offspring);
                     if (!w.isAlive()) {
-                        wolves.splice(i, 1);
+                        weasels.splice(i, 1);
                     }
                 }
             }
 
             // Add new offspring
-            sheep.push(...newOffspring.sheep);
+            pheasants.push(...newOffspring.pheasants);
             rabbits.push(...newOffspring.rabbits);
-            wolves.push(...newOffspring.wolves);
+            squirrels.push(...newOffspring.squirrels);
+            mice.push(...newOffspring.mice);
+            eagles.push(...newOffspring.eagles);
+            snakes.push(...newOffspring.snakes);
+            weasels.push(...newOffspring.weasels);
 
             // Patch logic (Limited Grass B Regrowth with Carrying Capacity)
             if (config.hasLimitedGrass) {
@@ -1027,11 +1531,19 @@
             ticks++;
             
             if (currentVisibleChart === 'population') {
-                chartData.labels.push(ticks); 
-                chartData.sheep.push(sheep.length); 
-                chartData.wolves.push(wolves.length);
+                chartData.labels.push(ticks);
                 chartData.grass.push(config.hasLimitedGrass ? calculateCurrentGrassCount() : 0);
+                chartData.pheasants.push(pheasants.length);
                 chartData.rabbits.push(rabbits.length);
-                if (chartData.labels.length > MAX_CHART_POINTS) { chartData.labels.shift(); chartData.sheep.shift(); chartData.wolves.shift(); chartData.grass.shift(); chartData.rabbits.shift(); }
+                chartData.squirrels.push(squirrels.length);
+                chartData.mice.push(mice.length);
+                chartData.eagles.push(eagles.length);
+                chartData.snakes.push(snakes.length);
+                chartData.weasels.push(weasels.length);
+
+                if (chartData.labels.length > MAX_CHART_POINTS) { 
+                    Object.keys(chartData).forEach(key => chartData[key].shift());
+                }
                 if (populationChartInstance) populationChartInstance.update('none');
             } else if (currentVisibleChart === 'energyPyramid') {
                 if (energyPyramidChartInstance) updateEnergyPyramidChartData();
@@ -1056,26 +1568,41 @@
             const energyFontSize = patchSize * ENERGY_FONT_SIZE_MULTIPLIER;
             ctx.textAlign = 'center'; ctx.textBaseline = 'middle';
 
-            if (config.hasSheep) {
-                sheep.forEach(s => s.draw(ctx, patchSize, config.showEnergy));
-            }
-            if (config.hasWolf) {
-                wolves.forEach(w => w.draw(ctx, patchSize, config.showEnergy));
+            if (config.hasPheasant) {
+                pheasants.forEach(p => p.draw(ctx, patchSize, config.showEnergy));
             }
             if (config.hasRabbit) {
                 rabbits.forEach(r => r.draw(ctx, patchSize, config.showEnergy));
             }
+            if (config.hasSquirrel) {
+                squirrels.forEach(sq => sq.draw(ctx, patchSize, config.showEnergy));
+            }
+            if (config.hasMouse) {
+                mice.forEach(m => m.draw(ctx, patchSize, config.showEnergy));
+            }
+            if (config.hasEagle) {
+                eagles.forEach(e => e.draw(ctx, patchSize, config.showEnergy));
+            }
+            if (config.hasSnake) {
+                snakes.forEach(s => s.draw(ctx, patchSize, config.showEnergy));
+            }
+            if (config.hasWeasel) {
+                weasels.forEach(w => w.draw(ctx, patchSize, config.showEnergy));
+            }
         }
 
         function updateDisplays() { 
             ticksDisplay.textContent = `回合: ${ticks}`;
             unlimitedGrassStatDisplay.textContent = `無限草A: ${config.hasUnlimitedGrass ? `供應中` : '停用'}`;
             const grassVal = calculateCurrentGrassCount();
             limitedGrassStatDisplay.textContent = `有限草B: ${config.hasLimitedGrass ? grassVal : (config.hasLimitedGrass === false ? '停用' : 0)}`; // Show 0 if enabled but empty, else "停用"
-            rabbitsCountDisplay.textContent = `兔群: ${config.hasRabbit ? rabbits.length : 0}`;                        
-            sheepCountDisplay.textContent = `羊群: ${config.hasSheep ? sheep.length : 0}`;
-            wolvesCountDisplay.textContent = `狼群: ${config.hasWolf ? wolves.length : 0}`;
+            pheasantCountDisplay.textContent = `雉雞: ${config.hasPheasant ? pheasants.length : 0}`;
+            rabbitsCountDisplay.textContent = `兔群: ${config.hasRabbit ? rabbits.length : 0}`;
+            squirrelCountDisplay.textContent = `松鼠: ${config.hasSquirrel ? squirrels.length : 0}`;
+            mouseCountDisplay.textContent = `老鼠: ${config.hasMouse ? mice.length : 0}`;
+            eagleCountDisplay.textContent = `老鷹: ${config.hasEagle ? eagles.length : 0}`;
+            snakeCountDisplay.textContent = `蛇: ${config.hasSnake ? snakes.length : 0}`;
+            weaselCountDisplay.textContent = `黃鼠狼: ${config.hasWeasel ? weasels.length : 0}`;
         }
 
         function updateEnergyPyramidChartData() {
@@ -1083,8 +1610,8 @@
             if (!energyPyramidChartInstance) return;
             const energies = calculateTrophicEnergies();
             energyPyramidChartInstance.data.datasets[0].data[0] = energies.secondaryConsumer;
-            energyPyramidChartInstance.data.datasets[0].data[1] = energies.primaryConsumer;
-            energyPyramidChartInstance.data.datasets[0].data[2] = energies.producer;
+            energyPyramidChartInstance.data.datasets[0].data[1] = energies.herbivores; // Was primaryConsumer
+            energyPyramidChartInstance.data.datasets[0].data[2] = energies.producer; // producer remains
             energyPyramidChartInstance.update('none');
         }
         function startSimulation() { 
@@ -1112,10 +1639,14 @@
             // Re-enable controls: master checkboxes first, then let updateControlVisibility handle groups.
             selectUnlimitedGrassCheckbox.disabled = false;
             selectLimitedGrassCheckbox.disabled = false;
-            selectSheepCheckbox.disabled = false;
+            selectPheasantCheckbox.disabled = false;
             selectRabbitCheckbox.disabled = false;
-            selectWolfCheckbox.disabled = false;
-            
+            selectSquirrelCheckbox.disabled = false;
+            selectMouseCheckbox.disabled = false;
+            selectEagleCheckbox.disabled = false;
+            selectSnakeCheckbox.disabled = false;
+            selectWeaselCheckbox.disabled = false;
+
             updateControlVisibility(); // Re-enables/disables sliders within groups based on checkboxes
 
             // Manually re-enable general controls
@@ -1129,27 +1660,45 @@
                 goContinuousButton.disabled = false; goOnceButton.disabled = false;
 
                 // Capture final counts BEFORE any config/slider changes that might trigger repopulation prematurely
-                const finalSheepCount = sheep.length;
+                const finalPheasantCount = pheasants.length;
                 const finalRabbitCount = rabbits.length;
-                const finalWolfCount = wolves.length; // This will be 0 if all wolves died
+                const finalSquirrelCount = squirrels.length;
+                const finalMouseCount = mice.length;
+                const finalEagleCount = eagles.length;
+                const finalSnakeCount = snakes.length;
+                const finalWeaselCount = weasels.length;
                 const finalGrassPercent = (worldWidth > 0 && worldHeight > 0) ? Math.round((calculateCurrentGrassCount() / (worldWidth * worldHeight)) * 100) : 0;
 
                 // Update config object directly with these final counts
-                config.initialNumberSheep = finalSheepCount;
+                config.initialNumberPheasant = finalPheasantCount;
                 config.initialNumberRabbits = finalRabbitCount;
-                config.initialNumberWolves = finalWolfCount; // config will now have the correct 0 if wolves died
+                config.initialNumberSquirrel = finalSquirrelCount;
+                config.initialNumberMouse = finalMouseCount;
+                config.initialNumberEagle = finalEagleCount;
+                config.initialNumberSnake = finalSnakeCount;
+                config.initialNumberWeasel = finalWeaselCount;
                 config.initialLimitedGrassPercent = finalGrassPercent;
 
                 // Update sliders and their display values directly from the corrected config
-                initialNumberSheepSlider.value = config.initialNumberSheep;
-                document.getElementById('initialNumberSheepValue').textContent = String(config.initialNumberSheep);
+                initialNumberPheasantSlider.value = config.initialNumberPheasant;
+                document.getElementById('initialNumberPheasantValue').textContent = String(config.initialNumberPheasant);
 
                 initialNumberRabbitsSlider.value = config.initialNumberRabbits;
                 document.getElementById('initialNumberRabbitsValue').textContent = String(config.initialNumberRabbits);
 
-                initialNumberWolvesSlider.value = config.initialNumberWolves; // Will be 0 if finalWolfCount was 0
-                document.getElementById('initialNumberWolvesValue').textContent = String(config.initialNumberWolves); // Span will show 0
+                initialNumberSquirrelSlider.value = config.initialNumberSquirrel;
+                document.getElementById('initialNumberSquirrelValue').textContent = String(config.initialNumberSquirrel);
+
+                initialNumberMouseSlider.value = config.initialNumberMouse;
+                document.getElementById('initialNumberMouseValue').textContent = String(config.initialNumberMouse);
+
+                initialNumberEagleSlider.value = config.initialNumberEagle;
+                document.getElementById('initialNumberEagleValue').textContent = String(config.initialNumberEagle);
+                initialNumberSnakeSlider.value = config.initialNumberSnake;
+                document.getElementById('initialNumberSnakeValue').textContent = String(config.initialNumberSnake);
+                initialNumberWeaselSlider.value = config.initialNumberWeasel;
+                document.getElementById('initialNumberWeaselValue').textContent = String(config.initialNumberWeasel);
 
                 initialLimitedGrassPercentSlider.value = config.initialLimitedGrassPercent;
                 document.getElementById('initialLimitedGrassPercentValue').textContent = config.initialLimitedGrassPercent;
@@ -1179,10 +1728,14 @@
             } else {
                 // Resync data, as it might be stale if simulation ran while hidden
                 populationChartInstance.data.labels = chartData.labels;
-                populationChartInstance.data.datasets[0].data = chartData.grass;
-                populationChartInstance.data.datasets[1].data = chartData.rabbits;
-                populationChartInstance.data.datasets[2].data = chartData.sheep;
-                populationChartInstance.data.datasets[3].data = chartData.wolves;
+                populationChartInstance.data.datasets[0].data = chartData.grass; // Limited Grass B
+                populationChartInstance.data.datasets[1].data = chartData.pheasants;
+                populationChartInstance.data.datasets[2].data = chartData.rabbits;
+                populationChartInstance.data.datasets[3].data = chartData.squirrels;
+                populationChartInstance.data.datasets[4].data = chartData.mice;
+                populationChartInstance.data.datasets[5].data = chartData.eagles;
+                populationChartInstance.data.datasets[6].data = chartData.snakes;
+                if (populationChartInstance.data.datasets[7]) populationChartInstance.data.datasets[7].data = chartData.weasels;
                 populationChartInstance.update('none');
             }
         });
@@ -1203,10 +1756,14 @@
             // Initialize checkbox states from config
             selectUnlimitedGrassCheckbox.checked = config.hasUnlimitedGrass;
             selectLimitedGrassCheckbox.checked = config.hasLimitedGrass;
-            selectSheepCheckbox.checked = config.hasSheep;
+            selectPheasantCheckbox.checked = config.hasPheasant;
             selectRabbitCheckbox.checked = config.hasRabbit;
-            selectWolfCheckbox.checked = config.hasWolf;
+            selectSquirrelCheckbox.checked = config.hasSquirrel;
+            selectMouseCheckbox.checked = config.hasMouse;
+            selectEagleCheckbox.checked = config.hasEagle;
+            selectSnakeCheckbox.checked = config.hasSnake;
+            selectWeaselCheckbox.checked = config.hasWeasel;
             showEnergyCheckbox.checked = config.showEnergy;
             autoScaleYAxisCheckbox.checked = config.autoScaleYAxis; // Initialize new checkbox
-            // modelVersionSelect.value = config.modelVersion; // REMOVE THIS LINE
 
             // Initialize slider values in UI and config from default config
             document.querySelectorAll('input[type="range"]').forEach(slider => slider.dispatchEvent(new Event('input')));

