// builtins.js
// 內建七個預載程式機器碼框架
// 請根據官方手冊或 mook 提供的程式碼，填入對應的 code/data 陣列，並確保導入本檔案後可在模擬器中執行。

window.builtins = {

  0x1: {
    name: 'Digital Dice (Cycling)',
    // 這個程式會在 7 段顯示器上循環顯示 1 到 6 的數字。
    // 由於目前 KA 指令的限制，它無法透過按鍵停止或啟動。
    code: [
      0x8, 0x1, // 00: TIA 1  (A = 1)
      0x1,      // 02: AO     (顯示 A)
      0xE, 0x9, // 03: CAL SHTS (短音效)
      0x9, 0x1, // 05: AIA 1  (A = A + 1)
      0xC, 0x7, // 07: CIA 7  (比較 A 與 7. 若 A != 7, Flag = 1)
      0xF, 0x0, 0x2, // 09: JUMP 02 (若 Flag = 1 (A 在 1-6), 跳回 02)
      0x8, 0x1, // 0C: TIA 1  (A = 1)
      0xF, 0x0, 0x2  // 0E: JUMP 02 (跳回 02 繼續循環)
    ]
  },  
  0x9: {
    name: 'Organ',
    // 讀取按鍵，若有按鍵則播放對應音階，否則繼續等待
    code: [
      0x0, // 00: KA (讀取按鍵到 A)
      0xC, 0x0, // 01: CIA 0 (若 A=0, flag=0)
      0xF, 0x0, 0x0, // 03: JUMP 00 (若 A!=0, flag=1, 跳回等待)
      0xE, 0xB, // 06: CAL SUND (播放 A 暫存器對應的音階)
      0xF, 0x0, 0x0, // 08: JUMP 00 (播放完跳回等待)
    ]
  },
  0xB: {
    name: 'Sound Hit Game',
    // 隨機等待後發出聲音，玩家需按下任意鍵，太快或太慢都會錯誤
    code: [
      0x8, 0x1, 0xA, 0x0, 0x4, // 00: TIA 1, TIY 0, AM (M[0]=1)
      0x8, 0x9, 0xE, 0xC, // 05: TIA 9, CAL TIMR (隨機延時)
      0x5, 0x9, 0xF, 0xC, 0x0, 0xF, 0x0, 0x4, // 09: MA, A-1, CIA 0, JUMP 04 (迴圈倒數)
      0xE, 0x8, // 11: CAL ERRS (太快按了)
      0x8, 0x7, 0xA, 0x0, 0x4, // 13: TIA 7, TIY 0, AM (M[0]=7, 準備計時)
      0xE, 0x9, // 18: CAL SHTS (發出聲音)
      0x0, 0xC, 0x0, 0xF, 0x1, 0xA, // 1A: KA, CIA 0, JUMP 1A (等待按鍵)
      0x5, 0xC, 0x1, 0xF, 0x2, 0x8, // 20: MA, CIA 1, JUMP 28 (檢查是否太慢)
      0xE, 0x7, // 26: CAL ENDS (成功)
      0xF, 0x0, 0x0, // 28: JUMP 00 (重新開始)
    ]
  },
  0xC: {
    name: 'Whack-a-mole',
    // 隨機點亮一個 LED，玩家需按下對應數字鍵
    code: [
      0x8, 0x5, 0xA, 0x1, 0x4, 0xA, 0x0, 0x4, // 00: TIA 5, TIY 1, AM, TIY 0, AM (初始化)
      0x8, 0x9, 0xE, 0xC, 0xA, 0x1, 0x5, 0x9, 0xF, 0x4, 0xC, 0x0, 0xF, 0x1, 0x9, // 08: 隨機延時
      0xE, 0x8, // 17: CAL ERRS (錯誤)
      0xA, 0x0, 0x5, 0xE, 0x1, // 19: TIY 0, MA, CAL SETR (點亮 LED)
      0x0, 0xC, 0x0, 0xF, 0x1, 0xE, // 1E: 等待按鍵
      0xA, 0x0, 0x5, 0xC, 0x1, 0xF, 0x3, 0x2, // 24: TIY 0, MA, CIA 1, JUMP 32 (檢查按鍵是否正確)
      0xE, 0x2, 0x9, 0x1, 0xF, 0x0, 0x0, // 2C: CAL RSTR, AIA 1, JUMP 00 (答對，換下一個)
      0xE, 0x7, 0xF, 0x3, 0x5 // 33: CAL ENDS, JUMP 35 (遊戲結束)
    ]
  },
  0xD: {
    name: 'Tennis',
    // 雙人網球遊戲，用 LED 來回移動表示球
    code: [
      0x8, 0x3, 0xA, 0x0, 0x4, 0x8, 0x3, 0xA, 0x1, 0x4, // 00: 初始化球的位置和方向
      0xA, 0x0, 0x5, 0xE, 0x1, // 0A: TIY 0, MA, CAL SETR (顯示球)
      0x8, 0x9, 0xE, 0xC, // 0F: TIA 9, CAL TIMR (延時)
      0xA, 0x0, 0x5, 0xE, 0x2, // 13: TIY 0, MA, CAL RSTR (清除球)
      0xA, 0x1, 0x5, 0xC, 0x0, 0xF, 0x2, 0x5, 0x9, 0x1, 0xA, 0x0, 0x4, // 18: 判斷球的方向並移動
      0xA, 0x1, 0x5, 0xC, 0x6, 0xF, 0x3, 0x2, 0x9, 0xF, 0xA, 0x0, 0x4, // 25: 判斷是否到底，改變方向
      0x0, 0xC, 0x0, 0xF, 0x0, 0xA, // 32: 等待按鍵
      0xC, 0x1, 0xF, 0x4, 0x3, 0xC, 0x2, 0xF, 0x4, 0x3, 0xF, 0x0, 0xA, // 38: 判斷玩家按鍵
      0xA, 0x0, 0x5, 0xC, 0x3, 0xF, 0x0, 0xA, // 45: 檢查是否擊中
      0xE, 0x7, 0xF, 0x4, 0xF // 4D: CAL ENDS, JUMP 4F (遊戲結束)
    ]
  },
  0xE: {
    name: 'Timer',
    code: [
      0x8, 0xF, // 00: TIA F (計數器設為15)
      0xA, 0x0, // 02: TIY 0 (Y指向資料記憶體0x50)
      0x4, // 04: AM (計數器存入記憶體0x50)
      0x8, 0x9, // 05: TIA 9 (A設為9，準備1秒延遲)
      0xE, 0xC, // 07: CAL TIMR (延遲1秒)
      0xE, 0x9, // 09: CAL SHTS (播放短音)
      0x5, // 0B: MA (從記憶體0x50讀回計數器)
      0x9, 0xF, // 0C: AIA F (A = A + F, 相當於 A - 1)
      0xC, 0x0, // 0E: CIA 0 (比較A是否為0)
      0xF, 0x0, 0x4, // 10: JUMP 04 (若A不為0，跳回04迴圈)
      0xE, 0x7, // 13: CAL ENDS (播放結束長音)
      0xF, 0x1, 0x5 // 15: JUMP 15 (無限迴圈，停止程式)
    ]
  },
  0xA: {
    name: 'Music Player',
    // 播放儲存在資料記憶體中的音符序列
    code: [
      0xA, 0x0, // 00: TIY 0 (Y 指向資料記憶體開頭)
      0x5, // 02: MA (讀取音符到 A)
      0xC, 0x0, // 03: CIA 0 (檢查是否為結束符 0)
      0xF, 0x1, 0x3, // 05: JUMP 13 (若是，跳到結束)
      0xE, 0xB, // 08: CAL SUND (播放音符)
      0xB, 0x1, // 0A: AIY 1 (Y 指向下一音符)
      0x8, 0x9, 0xE, 0xC, // 0C: TIA 9, CAL TIMR (音符間隔)
      0xF, 0x0, 0x2, // 10: JUMP 02 (迴圈播放下一個音符)
      0xE, 0x7, // 13: CAL ENDS (播放結束音)
      0xF, 0x1, 0x5, // 15: JUMP 15 (停止)
    ],
    // 資料: 小星星 (前段)
    data: [1, 1, 5, 5, 6, 6, 5, 0, 4, 4, 3, 3, 2, 2, 1, 0]
  },
  0xF: {
    name: 'Morse Code Generator',
    // 將資料記憶體中的 1 (dit) 和 2 (dah) 轉為摩斯電碼音效
    code: [
      0xA, 0x0, 0x5, 0xC, 0x0, 0xF, 0x1, 0xD, // 00: TIY 0, MA, CIA 0, JUMP 1D (讀取資料，若為0則結束)
      0xC, 0x1, 0xF, 0x1, 0x8, // 08: CIA 1, JUMP 18 (若為1，跳到播放短音)
      0xE, 0xA, // 0D: CAL LONS (播放長音)
      0xB, 0x1, 0x8, 0x3, 0xE, 0xC, 0xF, 0x0, 0x0, // 0F: AIY 1, TIA 3, CAL TIMR, JUMP 00 (指向下一資料並迴圈)
      0xE, 0x9, 0xF, 0x0, 0xF, // 18: CAL SHTS, JUMP 0F (播放短音並跳轉)
      0xE, 0x7, 0xF, 0x1, 0xF, // 1D: CAL ENDS, JUMP 1F (結束)
    ],
    // 資料: SOS
    data: [1, 1, 1, 2, 2, 2, 1, 1, 1, 0]
  },
};